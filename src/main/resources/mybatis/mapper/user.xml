<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 @Mapper를 지정한다. -->
<mapper namespace="com.hdd.hdeco.mapper.UserMapper">

  <!-- user가입시 유저데이터 삽입문 -->
  <insert id="insertUser" useGeneratedKeys="true" keyProperty="userNo" parameterType="UserDTO">
    INSERT INTO USER_T (
        ID
      , PW
      , NAME
      , GENDER
      , EMAIL
      , MOBILE
      , BIRTHYEAR
      , BIRTHDATE
      , POSTCODE
      , ROAD_ADDRESS
      , JIBUN_ADDRESS
      , DETAIL_ADDRESS
      , EXTRA_ADDRESS
      , AGREECODE
      , JOINED_AT
      , PW_MODIFIED_AT
      , AUTOLOGIN_ID
      , AUTOLOGIN_EXPIRED_AT
      , ADMIN_CHECK
    ) VALUES (
        #{id}
      , #{pw}
      , #{name}
      , #{gender}
      , #{email}
      , #{mobile}
      , #{birthyear}
      , #{birthdate}
      , #{postcode}
      , #{roadAddress}
      , #{jibunAddress}
      , #{detailAddress}
      , #{extraAddress}
      , #{agreecode}
      , NOW()
      , NOW()
      , NULL
      , NULL
      , #{adminCheck}
    )
  </insert>

  <!-- 유저 아이디 검사 -->
  <select id="selectUserById" parameterType="String" resultType="UserDTO">
    SELECT USER_NO
         , ID
         , PW
         , NAME
         , GENDER
         , EMAIL
         , MOBILE
         , BIRTHYEAR
         , BIRTHDATE
         , POSTCODE
         , ROAD_ADDRESS
         , JIBUN_ADDRESS
         , DETAIL_ADDRESS
         , EXTRA_ADDRESS
         , AGREECODE
         , JOINED_AT
         , PW_MODIFIED_AT
         , AUTOLOGIN_ID
         , AUTOLOGIN_EXPIRED_AT
         , ADMIN_CHECK
      FROM USER_T
     WHERE ID = #{id}
  </select>
  <!-- sleepUser인지 검사 -->
  <select id="selectSleepUserById" parameterType="String" resultType="SleepUserDTO">
    SELECT ID
      FROM SLEEP_USER_T
     WHERE ID = #{id}
  </select>
  <!-- outUser인지 검사 -->
  <select id="selectOutUserById" parameterType="String" resultType="OutUserDTO">
    SELECT ID
      FROM OUT_USER_T
     WHERE ID = #{id}
  </select>
  
  <!-- email검사 -->
  <select id="selectUserByEmail" parameterType="String" resultType="UserDTO">
    SELECT EMAIL
      FROM USER_T
     WHERE EMAIL = #{email}
  </select>
  
  
  <!-- sleepUserEmail검사 -->
  <select id="selectSleepUserByEmail" parameterType="String" resultType="SleepUserDTO">
    SELECT EMAIL
      FROM SLEEP_USER_T
     WHERE EMAIL = #{email}
  </select>
  
  <!-- outUserEmail검사 -->
    <select id="selectOutUserByEmail" parameterType="String" resultType="OutUserDTO">
    SELECT EMAIL
      FROM OUT_USER_T
     WHERE EMAIL = #{email}
  </select> 
  
  
  
  
  <select id="selectUserByUserDTO" parameterType="UserDTO" resultType="UserDTO">
    SELECT ID
         , NAME
         , ADMIN_CHECK
      FROM USER_T
     WHERE ID = #{id}
       AND PW = #{pw}
  </select>
  
  <!-- access한 유저데이터 업데이트 -->
  <update id="updateUserAccess" parameterType="String">
    UPDATE USER_ACCESS_T
       SET LAST_LOGIN_AT = NOW()
     WHERE ID = #{id}
  </update>
  <!-- access한 유저데이터의 현재시간등 데이터삽입문 -->
  <insert id="insertUserAccess" parameterType="String">
    INSERT INTO USER_ACCESS_T (
        ID
      , LAST_LOGIN_AT
    ) VALUES (
        #{id}
      , NOW()
    )
  </insert>
  
  <!-- 로그아웃 시 자동로그인 해제 -->
  <update id="deleteAutologin" parameterType="String">
    UPDATE USER_T
       SET AUTOLOGIN_ID = NULL
         , AUTOLOGIN_EXPIRED_AT = NULL
     WHERE ID = #{id}
  </update>
  <!-- Autologin... -->
  <update id="insertAutologin" parameterType="UserDTO">
    UPDATE USER_T
       SET AUTOLOGIN_ID = #{autologinId}
         , AUTOLOGIN_EXPIRED_AT = #{autologinExpiredAt}
     WHERE ID = #{id}
  </update>
  
  <!--인터셉터에서 작동할 Autologin... -->
  <select id="selectAutologin" parameterType="String" resultType="UserDTO">
    SELECT ID
      FROM USER_T
     WHERE AUTOLOGIN_ID = #{autologinId}
       AND AUTOLOGIN_EXPIRED_AT > NOW()
  </select>
  
  <!-- 회원 조회 -->
 <select id="selectUserByCount" parameterType="String" resultType="UserDTO">
    SELECT USER_NO
         , ID
         , NAME
         , GENDER
         , EMAIL
         , MOBILE
         , BIRTHYEAR
         , BIRTHDATE
         , POSTCODE
         , ROAD_ADDRESS
         , JIBUN_ADDRESS
         , DETAIL_ADDRESS
         , EXTRA_ADDRESS
         , JOINED_AT
         , ADMIN_CHECK
      FROM USER_T
     WHERE ID = #{id}
  </select>
  
  <!-- 탈퇴한 회원 정보 OUT_USER_T에 등록 -->
  <insert id="insertOutUser" parameterType="OutUserDTO">
    INSERT INTO OUT_USER_T (
        USER_NO
      , ID
      , EMAIL
      , JOINED_AT
      , OUT_AT
    ) VALUES (
        #{userNo} 
      , #{id}
      , #{email}
      , #{joinedAt}
      , NOW()
    )
  </insert>
  
  <!-- 탈퇴한 회원 정보 user테이블에서 삭제 -->
  <delete id="deleteUser" parameterType="String">
    DELETE
      FROM USER_T
     WHERE ID = #{id}
  </delete>
  
  <!-- 아이디 찾기 -->
  <select id="selectFindUserId" parameterType="UserDTO" resultType="UserDTO">
  SELECT ID
       , JOINED_AT
    FROM USER_T
    WHERE NAME = #{name}
      AND EMAIL = #{email}
  </select>
  
  <!-- 비밀번호 변경 -->
  <update id="updateUserPassword" parameterType="UserDTO">
    UPDATE USER_T
       SET PW = #{pw}
         , PW_MODIFIED_AT = NOW()
     WHERE ID = #{id}
  </update>
  
  <!-- 이메일 변경 -->
  <update id="updateUserEmail" parameterType="UserDTO">
    UPDATE USER_T
       SET EMAIL = #{email}
     WHERE ID = #{id}
  </update>
  
  <!-- 개인정보 변경 -->
  <update id="updateUserInfo" parameterType="UserDTO">
    UPDATE USER_T
       SET NAME = #{name}
         , GENDER = #{gender}
         , MOBILE = #{mobile}
         , BIRTHYEAR = #{birthyear}
         , BIRTHDATE = #{birthdate}
         , POSTCODE = #{postcode}
         , ROAD_ADDRESS = #{roadAddress}
         , JIBUN_ADDRESS = #{jibunAddress}
         , DETAIL_ADDRESS = #{detailAddress}
         , EXTRA_ADDRESS = #{extraAddress}
         , AGREECODE = #{agreecode}
     WHERE ID = #{id}
  </update>
  
   <!-- 휴면처리 1단계 : 1년(12개월) 이상 접속 내역(USER_ACCESS_T의 LAST_LOGIN_AT)이 없는 회원을 휴면 테이블에 저장하기 -->
   <insert id="insertSleepUser">
    INSERT INTO SLEEP_USER_T (
        USER_NO
      , ID
      , PW
      , NAME
      , GENDER
      , EMAIL
      , MOBILE
      , BIRTHYEAR
      , BIRTHDATE
      , POSTCODE
      , ROAD_ADDRESS
      , JIBUN_ADDRESS
      , DETAIL_ADDRESS
      , EXTRA_ADDRESS
      , AGREECODE
      , JOINED_AT
      , PW_MODIFIED_AT
      , SLEPT_AT
      , ADMIN_CHECK   
    ) (SELECT U.USER_NO
            , U.ID
            , U.PW
            , U.NAME
            , U.GENDER
            , U.EMAIL
            , U.MOBILE
            , U.BIRTHYEAR
            , U.BIRTHDATE
            , U.POSTCODE
            , U.ROAD_ADDRESS
            , U.JIBUN_ADDRESS
            , U.DETAIL_ADDRESS
            , U.EXTRA_ADDRESS
            , U.AGREECODE
            , U.JOINED_AT
            , U.PW_MODIFIED_AT
            , NOW()
            , U.ADMIN_CHECK
         FROM USER_T U LEFT OUTER JOIN USER_ACCESS_T UA 
           ON U.ID = UA.ID
        WHERE TIMESTAMPDIFF(MONTH, UA.LAST_LOGIN_AT, NOW()) >= 12  <!-- 12개월 이상 로그인 이력이 없는 회원 -->
           OR (TIMESTAMPDIFF(MONTH, U.JOINED_AT, NOW()) >= 12 AND UA.LAST_LOGIN_AT IS NULL));  <!-- 가입일이 12개월 이상 지나고, 로그인 이력이 아예 없는 회원 -->
  </insert> 
  
  <!-- 휴면처리 2단계 : 1년(12개월) 이상 접속 내역(USER_ACCESS_T의 LAST_LOGIN_AT)이 없는 회원을 회원 테이블에서 삭제하기 -->
  <delete id="deleteUserForSleep">
    
    DELETE U
      FROM USER_T U 
      LEFT OUTER JOIN USER_ACCESS_T UA 
        ON U.ID = UA.ID
     WHERE TIMESTAMPDIFF(MONTH, UA.LAST_LOGIN_AT, NOW()) >= 12
        OR (TIMESTAMPDIFF(MONTH, U.JOINED_AT, NOW()) >= 12 AND UA.LAST_LOGIN_AT IS NULL);
                     
  </delete>
  
  <!-- 휴면복원 1단계 : 휴면 테이블의 데이터를 회원 테이블에 저장하기 -->
  <insert id="insertRestoreUser" parameterType="String">
    INSERT INTO USER_T (
        USER_NO
      , ID
      , PW
      , NAME
      , GENDER
      , EMAIL
      , MOBILE
      , BIRTHYEAR
      , BIRTHDATE
      , POSTCODE
      , ROAD_ADDRESS
      , JIBUN_ADDRESS
      , DETAIL_ADDRESS
      , EXTRA_ADDRESS
      , AGREECODE
      , JOINED_AT
      , PW_MODIFIED_AT
      , ADMIN_CHECK
    ) (SELECT USER_NO
            , ID
            , PW
            , NAME
            , GENDER
            , EMAIL
            , MOBILE
            , BIRTHYEAR
            , BIRTHDATE
            , POSTCODE
            , ROAD_ADDRESS
            , JIBUN_ADDRESS
            , DETAIL_ADDRESS
            , EXTRA_ADDRESS
            , AGREECODE
            , JOINED_AT
            , PW_MODIFIED_AT
            , ADMIN_CHECK
         FROM SLEEP_USER_T
        WHERE ID = #{id})
  </insert>
   
  <!-- 휴면복원 2단계 : 복원할 회원을 SLEEP_USER_T 테이블에서 삭제하기 -->
  <delete id="deleteSleepUser" parameterType="String">
    DELETE
      FROM SLEEP_USER_T
     WHERE ID = #{id}
  </delete>
  
  
<!-- 네이버 회원 가입 -->
  <insert id="insertNaverUser" parameterType="UserDTO">
    INSERT INTO USER_T (
        ID
      , PW
      , NAME
      , GENDER
      , EMAIL
      , MOBILE
      , BIRTHYEAR
      , BIRTHDATE
      , AGREECODE
      , JOINED_AT
      , PW_MODIFIED_AT
      , AUTOLOGIN_ID
      , AUTOLOGIN_EXPIRED_AT
      , ADMIN_CHECK
    ) VALUES (
        #{id}
      , #{pw}
      , #{name}
      , #{gender}
      , #{email}
      , #{mobile}
      , #{birthyear}
      , #{birthdate}
      , #{agreecode}
      , NOW()
      , NOW()
      , NULL
      , NULL
      , #{adminCheck}
    )
  </insert>
 
</mapper>